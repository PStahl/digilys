- user_settings ||= nil

- cache_key  = [ color_table, Evaluation.generic_cache_key ]
- can_change = can?(:update, color_table)

.row-fluid
  .span2
    .btn-group.result-toggles
      %button.btn.active(data-value="value") Resultat
      %button.btn(data-value="stanine") Stanine

  - cache [ *cache_key, "tools" ] do
    .span3
      %select#color-table-group-selector{multiple: true, data: { placeholder: t(:".all_groups") }}
        = options_for_select(color_table.group_hierarchy.collect { |g| [[g.name, g.parent.try(:name)].compact.join(", "), g.id]})
    .span3.form-inline
      %select#table-state-selector{data: { url: select_table_state_path(":id"),
        "clear-url" => clear_state_color_table_path(color_table) }}
        = options_for_select([[t(:".change_state"), ""], [t(:".clear_state"), "0"]]) + options_from_collection_for_select(color_table.table_states, "id", "name")

  .span2
    - if can_change
      %a.btn{href:"#tools-modal", data: { toggle: "modal" }}
        %i.icon-wrench
        = t(:".tools")

- table_state = user_settings ? user_settings["datatable_state"] : nil

.color-table.color-table-show-value{class: "#{can_change ? "" : "no-column-menu"}",
  data: { "save-local-state-path" => save_state_color_table_path(color_table), "table-state" => JSON.dump(table_state) }}

  %table.table.table-bordered.table-hover.data-table.results-table

    - cache [ *cache_key, "table" ] do

      -# Track values and stanines for averages
      - values = {}
      - stanines = {}

      - evaluations = color_table.generic_evaluations + color_table.suite_evaluations.only_series_currents.all

      %thead
        %tr
          %th#datatable-column-student-names.student
            = student_name = Student.human_attribute_name(:name)
            = link_to "", "#", class: "icon-cog column-menu-action",
              data: { type: "column-menu", toggle: "single-popover", title: student_name }
          - color_table.student_data.each do |key|
            %th.student-data{id: "datatable-column-student-data-#{key.parameterize}"}
              = key
              = link_to "", "#", class: "icon-cog column-menu-action",
                data: { type: "column-menu", toggle: "single-popover", title: key }
          - evaluations.each do |evaluation|
            %th.evaluation{id: "datatable-column-evaluation-#{evaluation.id}", title: evaluation_info(evaluation)}
              = evaluation.name
              = link_to "", "#", class: "icon-cog column-menu-action",
                data: { type: "column-menu", toggle: "single-popover", title: evaluation.name }

            -# Initialize the tracking variables
            - values[evaluation.id]   = []
            - stanines[evaluation.id] = []

        %tr.filter-row
          - 1.upto(color_table.student_data.length + evaluations.length + 1) do
            %td.filter
              %input{type: "text", placeholder: t(:".search_action")}

      %tbody
        - color_table.students.order(current_name_order).each do |student|
          %tr
            %th.student
              - name = student_name(student)
              %a.student{href:"#",
                data: { toggle: "single-popover",
                type: "student",
                title: name,
                "sort-key" => name,
                groups: student.group_ids.to_json } }
                = name
              = render partial: "students/details_table", locals: { student: student }

            - color_table.student_data.each do |key|
              %td.result
                - d = student.data_humanized[key] || "-"
                %div{"data-sort-key" => d}= d

            - evaluations.each do |evaluation|

              - if evaluation.series_id
                - result = evaluation.series.result_for(student)
              - else
                - result = evaluation.result_for(student)

              %td.result{class: result_color_class(result)}
                %div{"data-sort-key" => result.try(:display_value) || "-"}
                  - if result && result.stanine
                    %ul
                      %li.value=   result.display_value
                      %li.stanine= result.stanine
                  - else
                    %span= result.try(:display_value) || "-"
                  = result_color_image(result)

              -# Add to track variables
              - unless evaluation.value_type.boolean?
                - values[evaluation.id]   << result.value   if result.try(:value)
                - stanines[evaluation.id] << result.stanine if result.try(:stanine)

      %tfoot
        %tr.averages
          %th= t(:".averages")
          - unless color_table.student_data.blank?
            - 1.upto(color_table.student_data.length) do
              %td &nbsp;

          - evaluations.each do |evaluation|

            - if !values[evaluation.id].blank?
              - average_value = values[evaluation.id].instance_eval { reduce(:+).to_f / size }
              - if !evaluation.value_aliases.blank?
                - average_value = evaluation.alias_for(average_value.round)
              - else
                - average_value = number_with_precision(average_value, precision: 2) || "-"
            - else
              - average_value = "-"

            %td.result{class: result_color_class(average_value, evaluation)}
              %div
                - if !stanines[evaluation.id].blank?
                  %ul
                    %li.value= average_value
                    %li.stanine= number_with_precision(stanines[evaluation.id].instance_eval { reduce(:+).to_f / size }, precision: 2)
                - else
                  = average_value
                = result_color_image(average_value, evaluation)

- cache [ *cache_key, "dialogs" ] do
  %ul#color-table-column-popup.color-table-column-popup.nav.nav-pills.nav-stacked.hide(aria-hidden="true")
    /%li.locked
    /  %a(href="#" data-action="unlock-column")= t(:".unlock_column_action")
    /%li.unlocked
    /  %a(href="#" data-action="lock-column")= t(:".lock_column_action")
    %li.unlocked
      %a(href="#" data-action="hide-column")= t(:".hide_column_action")
    %li.unlocked
      %a(href="#show-column-modal" data-action="show-column")= t(:".show_column_action")

  #show-column-modal.modal.hide.fade(role="dialog" aria-hidden="true" data-backdrop="true")
    .modal-header
      %button.close{type: "button", data: { dismiss: "modal" }, aria: { hidden: "true" }} &times;
      %h3= t(:".show_column_action")
    .modal-body
      .alert.alert-block.alert-info= t(:".show_column_hint")
      %ul.unstyled

  #tools-modal.modal.hide.fade(role="dialog" aria-hidden="true" aria-labelledby="feedback-eula-header" data-backdrop="true")
    .modal-header
      %button.close{type: "button", data: { dismiss: "modal" }, aria: { hidden: "true" }} &times;
      %h3= t(:".tools")
    .modal-body
      .form-inline
        = text_field_tag "table-state-name",
          nil,
          placeholder: TableState.human_attribute_name(:name)
        %button#save-table-state.btn{data: { datatable: ".color-table", url: color_table_table_states_path(color_table) }}
          = t(:".save_current_state")
        %small.help-block= t(:".edit_table_state_notice")
      %table#table-states.table.table-striped.table-hover{"data-delete-action-name" => t(:".destroy_action")}
        %thead
          %tr
            %th= TableState.model_name.human
            %th.actions &nbsp;
        %tbody
          - @color_table.table_states.each do |table_state|
            %tr{data: { id: table_state.id }}
              %td= link_to table_state.name,
                select_table_state_path(table_state)
              %td= link_to t(:".destroy_action"),
                table_state_path(table_state),
                method: :delete,
                remote: true,
                class:  "btn btn-small btn-danger"

