%h1
  = @suite.name
  %small= @suite.is_template? ? t(:".template_title") : Suite.model_name.human

= render partial: "navigation", locals: { suite: @suite, active: :color_table }

-# Track values and stanines for averages
- values = {}
- stanines = {}
- evaluations = @generic_evaluations[:included] + @suite.evaluations

%table.table.table-bordered.table-hover.suite-results.suite-show-value.results-table.results-fixed-table

  %thead
    %tr
      %th.student
        .btn-group.result-toggles
          %button.btn.active(data-value="value") Resultat
          %button.btn(data-value="stanine") Stanine
      - @suite.student_data.each do |key|
        %th.student-data
          = key
          = link_to "",
            remove_student_data_suite_path(@suite, key: key),
            method: :delete,
            class: "icon-trash"
      - evaluations.each do |evaluation|
        %th.evaluation
          = evaluation.name
          - if evaluation.type.generic?
            = link_to "",
              remove_generic_evaluations_suite_path(@suite, evaluation_id: evaluation.id),
              method: :delete,
              class: "icon-trash"

        -# Initialize the tracking variables
        - values[evaluation.id]   = []
        - stanines[evaluation.id] = []

  %tbody
    - @suite.students.each do |student|
      %tr
        %th.student
          %a.student{href:"#", 
          data: { toggle: "popover",
          title: student.name,
          content: render(partial: "students/details_table", locals: { student: student })} }= student.name

        - @suite.student_data.each do |key|
          %td.result= student.data_humanized[key] || "-"
        - evaluations.each do |evaluation|
          - result = evaluation.result_for(student)
          %td.result{class: result_color_class(result)}
            - if result.stanine
              %ul
                %li.value=   result.try(:display_value) || "-"
                %li.stanine= result.try(:stanine)       || "-"
            - else
              = result.try(:display_value) || "-"

          -# Add to track variables
          - values[evaluation.id]   << result.value   if result.try(:value)
          - stanines[evaluation.id] << result.stanine if result.try(:stanine)

  %tfoot
    %tr
      %th{colspan: @suite.student_data.length + evaluations.length + 1} &nbsp;
    %tr.averages
      %th= t(:".averages")
      - unless @suite.student_data.blank?
        %td{colspan: @suite.student_data.length}

      - evaluations.each do |evaluation|

        - if !values[evaluation.id].blank?
          - average_value = values[evaluation.id].instance_eval { reduce(:+).to_f / size }
          - if !evaluation.value_aliases.blank?
            - average_value = evaluation.alias_for(average_value.round)
          - else
            - average_value = number_with_precision(average_value, precision: 2) || "-"
        - else
          - average_value = "-"

        %td.result{class: result_color_class(average_value, evaluation)}
          - if !stanines[evaluation.id].blank?
            %ul
              %li.value= average_value
              %li.stanine= number_with_precision(stanines[evaluation.id].instance_eval { reduce(:+).to_f / size }, precision: 2)
          - else
            = average_value

= semantic_form_for @suite,
  url: add_generic_evaluations_suite_path(@suite),
  html: { class: "form-inline" } do |f|
  = f.select :generic_evaluations, options_from_collection_for_select(@generic_evaluations[:missing], :id, :name)
  = f.action :submit, label: t(:".add_generic_evaluation_action")

