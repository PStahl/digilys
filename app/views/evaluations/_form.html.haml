- if evaluation.suite || evaluation.template
  .alert.alert-info
    = t(:".for_suite",     suite_name:    evaluation.suite.name)    if evaluation.suite
    = t(:".from_template", template_name: evaluation.template.name) if evaluation.template && evaluation.new_record?

- if evaluation.new_record? && !evaluation.template
  = form_for evaluation,
    url: new_from_template_evaluations_path(),
    html: { class: "form-horizontal select-evaluation-template-form" } do |f|

    = f.hidden_field :suite_id

    .control-group
      = f.label :template_id, class: "control-label"
      .controls
        = f.hidden_field :template_id,
          class: "evaluation-template-autocomplete-field",
          data: { url: search_evaluations_path(), 
            placeholder: t(:".template_placeholder")}
        = f.submit t(:".use_template_action"), class: "btn btn-primary"

= semantic_form_for evaluation,
  html: { id: "evaluation-form", class: "form-horizontal #{evaluation.new_record? ? "new" : "edit" }" } do |f|

  = f.inputs do

    = f.hidden_field :template_id
    = f.hidden_field :suite_id

    = f.input :name, required: true, input_html: { required: true, autofocus: true }

    - if evaluation.has_regular_suite?
      = f.input :date, as: :string, required: true, input_html: { required: true, class: "datepicker" }

    = f.input :max_result,
      required: true,
      input_html: { required: true, "data-suggestion-lower" => Conf.evaluation.suggestion_lower, "data-suggestion-upper" => Conf.evaluation.suggestion_upper }

  = f.inputs t(:".color_ranges") do
    .control-group
      %label.control-label= t(:".red")
      .controls
        %input(disabled="disabled" class="input-mini red-min" type="number" value="0")
        &ndash;
        %input(disabled="disabled" class="input-mini red-max" type="number" value="0" id="evaluation-red-max")

    .control-group
      = f.label :red_below,
        "#{t(:".yellow")}<abbr title=\"#{t(:"formtastic.required")}\">*</abbr>".html_safe,
        class: "control-label"
      .controls
        = f.number_field :red_below,   required: true, class: "input-mini"
        &ndash;
        = f.number_field :green_above, required: true, class: "input-mini"
        .suggestion-container{"data-suggestion-copy" => t(:".suggestion_copy")}

    .control-group
      %label.control-label= t(:".green")
      .controls
        %input(disabled="disabled" class="input-mini green-min" type="number" value="0" id="evaluation-green-min")
        &ndash;
        %input(disabled="disabled" class="input-mini green-max" type="number" value="0" id="evaluation-green-max")

    .control-group
      .controls
        = f.action :submit, label: t(:".save_action"), button_html: { class: "btn btn-primary"}
        - if evaluation.suite
          %a.btn{href:suite_path(evaluation.suite) }= t(:".cancel_action")
        - else
          %a.btn{href:evaluation.new_record? ? evaluations_path() : evaluation_path(evaluation) }= t(:".cancel_action")

  = f.inputs t(:".stanines") do

    - 1.upto(8) do |i|
      = f.input :"stanine#{i}",
        input_html: { class: "input-mini stanine-field" },
        prepend: '<span class="stanine-below">0</span> &ndash;'.html_safe

    .control-group
      %label.control-label= t(:".stanine9")
      .controls
        .input-prepend
          %span.add-on
            %span.stanine-below 0
            &ndash;
          %input(disabled="disabled" class="input-mini stanine-max" type="number" value="0" id="evaluation-stanine-max")


  = f.actions do
    = f.action :submit, label: t(:".save_action"), button_html: { class: "btn btn-primary"}
    - if evaluation.suite
      %a.btn{href:suite_path(evaluation.suite) }= t(:".cancel_action")
    - else
      %a.btn{href:evaluation.new_record? ? evaluations_path() : evaluation_path(evaluation) }= t(:".cancel_action")
